import { __values } from 'tslib';
import { Component, HostListener, Input, ViewChild, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} origin
 * @return {?}
 */
function saveDecimal(origin) {
    return Math.floor(origin * 100) / 100;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Particle = /** @class */ (function () {
    function Particle(range, speed, size) {
        if (speed === void 0) { speed = 'normal'; }
        if (size === void 0) { size = 1.5; }
        this.max_width = range[0];
        this.max_height = range[1];
        this.initPosition();
        this.initSpeed(speed);
        this.initSize(size);
        this.initColor();
    }
    /**
     * @param {?} range
     * @return {?}
     */
    Particle.prototype.onRange = /**
     * @param {?} range
     * @return {?}
     */
    function (range) {
        this.max_width = range[0];
        this.max_height = range[1];
    };
    /**
     * @return {?}
     */
    Particle.prototype.initPosition = /**
     * @return {?}
     */
    function () {
        this.x = saveDecimal(Math.random() * this.max_width);
        this.y = saveDecimal(Math.random() * this.max_height);
    };
    /**
     * @param {?} speed
     * @return {?}
     */
    Particle.prototype.initSpeed = /**
     * @param {?} speed
     * @return {?}
     */
    function (speed) {
        /** @type {?} */
        var vi = [];
        if (typeof speed === 'string') {
            switch (speed) {
                case 'fast':
                    vi = [1, 1];
                    break;
                case 'normal':
                    vi = [2, 2];
                    break;
                case 'slow':
                    vi = [5, 5];
                    break;
                default:
                    vi = [2, 2];
            }
        }
        else {
            vi = speed;
        }
        this.vx = saveDecimal(Math.random() / vi[0]);
        this.vy = saveDecimal(Math.random() / vi[1]);
    };
    /**
     * @param {?} size
     * @return {?}
     */
    Particle.prototype.initSize = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        this.size = (1 + Math.random()) * size;
    };
    /**
     * @return {?}
     */
    Particle.prototype.initColor = /**
     * @return {?}
     */
    function () {
        this.color = "rgb(" + Math.floor(Math.random() * 256) + "," + Math.floor(Math.random() * 256) + "," + Math.floor(Math.random() * 256) + ")";
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    Particle.prototype.draw = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);
        ctx.fillStyle = this.color;
        ctx.strokeStyle = this.color;
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
    };
    /**
     * @return {?}
     */
    Particle.prototype.update = /**
     * @return {?}
     */
    function () {
        this.edge();
        this.x = this.x + this.vx;
        this.y = this.y + this.vy;
    };
    /**
     * @return {?}
     */
    Particle.prototype.edge = /**
     * @return {?}
     */
    function () {
        if (this.x + this.vx > this.max_width || this.x + this.vx < 0) {
            this.vx = -this.vx;
        }
        if (this.y + this.vy > this.max_height || this.y + this.vy < 0) {
            this.vy = -this.vy;
        }
    };
    return Particle;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgxParticlesComponent = /** @class */ (function () {
    function NgxParticlesComponent() {
        var _this = this;
        this.particles = [];
        this.resizing = false;
        this.total = 100;
        this.stageChange = function () {
            var e_1, _a;
            _this.initStage();
            /** @type {?} */
            var range = [_this.width, _this.height];
            try {
                for (var _b = __values(_this.particles), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var x = _c.value;
                    x.onRange(range);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            _this.resizing = false;
        };
        this.drawContext = function () {
            var e_2, _a;
            _this.ctx.clearRect(0, 0, _this.width, _this.height);
            try {
                for (var _b = __values(_this.particles), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var x = _c.value;
                    x.draw(_this.ctx);
                    x.update();
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            _this.mainAnimationFrame = window.requestAnimationFrame(_this.drawContext);
            _this.resizing = false;
        };
    }
    /**
     * @return {?}
     */
    NgxParticlesComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.canvas = this.stageRef.nativeElement;
        this.ctx = this.canvas.getContext('2d', { alpha: false });
        this.initStage();
        this.initParticle();
        this.drawContext();
    };
    /**
     * @return {?}
     */
    NgxParticlesComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.ctx.clearRect(0, 0, this.width, this.height);
        window.cancelAnimationFrame(this.mainAnimationFrame);
        window.cancelAnimationFrame(this.changeAnimationFrame);
    };
    /**
     * @return {?}
     */
    NgxParticlesComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        if (!this.resizing && (!this.default_height || !this.default_width)) {
            this.resizing = true;
            if (window.requestAnimationFrame) {
                window.requestAnimationFrame(this.stageChange);
            }
            else {
                setTimeout(this.stageChange, 66);
            }
        }
    };
    /**
     * @return {?}
     */
    NgxParticlesComponent.prototype.initStage = /**
     * @return {?}
     */
    function () {
        var _a = this.canvas.parentElement, clientWidth = _a.clientWidth, clientHeight = _a.clientHeight;
        if (this.default_width) {
            this.canvas.width = this.width = this.default_width;
        }
        else {
            this.canvas.width = this.width = clientWidth;
        }
        if (this.default_height) {
            this.canvas.height = this.height = this.default_height;
        }
        else {
            this.canvas.height = this.height = clientHeight;
        }
    };
    /**
     * @return {?}
     */
    NgxParticlesComponent.prototype.initParticle = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var range = [this.width, this.height];
        for (var i = 0; i < this.total; i++) {
            this.particles[i] = new Particle(range, (this.args && this.args.speed) ? this.args.speed : 'normal', (this.args && this.args.size) ? this.args.size : 1.5);
        }
    };
    NgxParticlesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-particle',
                    template: "\n    <div id=\"stage\">\n      <canvas #stageRef></canvas>\n    </div>\n  ",
                    styles: ["\n    #stage {\n      height: 100%;\n      width: 100%;\n      will-change: all;\n    }\n  "]
                }] }
    ];
    NgxParticlesComponent.propDecorators = {
        stageRef: [{ type: ViewChild, args: ['stageRef',] }],
        total: [{ type: Input }],
        default_width: [{ type: Input }],
        default_height: [{ type: Input }],
        args: [{ type: Input }],
        onResize: [{ type: HostListener, args: ['window:resize',] }]
    };
    return NgxParticlesComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgxParticlesModule = /** @class */ (function () {
    function NgxParticlesModule() {
    }
    NgxParticlesModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [NgxParticlesComponent],
                    exports: [NgxParticlesComponent]
                },] }
    ];
    return NgxParticlesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxParticlesModule, NgxParticlesComponent as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,