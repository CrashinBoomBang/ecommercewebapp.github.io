/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostListener, Input, ViewChild } from '@angular/core';
import { Particle } from './particle';
export class NgxParticlesComponent {
    constructor() {
        this.particles = [];
        this.resizing = false;
        this.total = 100;
        this.stageChange = () => {
            this.initStage();
            /** @type {?} */
            const range = [this.width, this.height];
            for (const x of this.particles) {
                x.onRange(range);
            }
            this.resizing = false;
        };
        this.drawContext = () => {
            this.ctx.clearRect(0, 0, this.width, this.height);
            for (const x of this.particles) {
                x.draw(this.ctx);
                x.update();
            }
            this.mainAnimationFrame = window.requestAnimationFrame(this.drawContext);
            this.resizing = false;
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.canvas = this.stageRef.nativeElement;
        this.ctx = this.canvas.getContext('2d', { alpha: false });
        this.initStage();
        this.initParticle();
        this.drawContext();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.ctx.clearRect(0, 0, this.width, this.height);
        window.cancelAnimationFrame(this.mainAnimationFrame);
        window.cancelAnimationFrame(this.changeAnimationFrame);
    }
    /**
     * @return {?}
     */
    onResize() {
        if (!this.resizing && (!this.default_height || !this.default_width)) {
            this.resizing = true;
            if (window.requestAnimationFrame) {
                window.requestAnimationFrame(this.stageChange);
            }
            else {
                setTimeout(this.stageChange, 66);
            }
        }
    }
    /**
     * @return {?}
     */
    initStage() {
        const { clientWidth, clientHeight } = this.canvas.parentElement;
        if (this.default_width) {
            this.canvas.width = this.width = this.default_width;
        }
        else {
            this.canvas.width = this.width = clientWidth;
        }
        if (this.default_height) {
            this.canvas.height = this.height = this.default_height;
        }
        else {
            this.canvas.height = this.height = clientHeight;
        }
    }
    /**
     * @return {?}
     */
    initParticle() {
        /** @type {?} */
        const range = [this.width, this.height];
        for (let i = 0; i < this.total; i++) {
            this.particles[i] = new Particle(range, (this.args && this.args.speed) ? this.args.speed : 'normal', (this.args && this.args.size) ? this.args.size : 1.5);
        }
    }
}
NgxParticlesComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-particle',
                template: `
    <div id="stage">
      <canvas #stageRef></canvas>
    </div>
  `,
                styles: [`
    #stage {
      height: 100%;
      width: 100%;
      will-change: all;
    }
  `]
            }] }
];
NgxParticlesComponent.propDecorators = {
    stageRef: [{ type: ViewChild, args: ['stageRef',] }],
    total: [{ type: Input }],
    default_width: [{ type: Input }],
    default_height: [{ type: Input }],
    args: [{ type: Input }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
if (false) {
    /** @type {?} */
    NgxParticlesComponent.prototype.stageRef;
    /** @type {?} */
    NgxParticlesComponent.prototype.canvas;
    /** @type {?} */
    NgxParticlesComponent.prototype.ctx;
    /** @type {?} */
    NgxParticlesComponent.prototype.width;
    /** @type {?} */
    NgxParticlesComponent.prototype.height;
    /** @type {?} */
    NgxParticlesComponent.prototype.particles;
    /** @type {?} */
    NgxParticlesComponent.prototype.mainAnimationFrame;
    /** @type {?} */
    NgxParticlesComponent.prototype.changeAnimationFrame;
    /** @type {?} */
    NgxParticlesComponent.prototype.resizing;
    /** @type {?} */
    NgxParticlesComponent.prototype.total;
    /** @type {?} */
    NgxParticlesComponent.prototype.default_width;
    /** @type {?} */
    NgxParticlesComponent.prototype.default_height;
    /** @type {?} */
    NgxParticlesComponent.prototype.args;
    /** @type {?} */
    NgxParticlesComponent.prototype.stageChange;
    /** @type {?} */
    NgxParticlesComponent.prototype.drawContext;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBhcnRpY2xlcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGFydGljbGVzanMvIiwic291cmNlcyI6WyJsaWIvbmd4LXBhcnRpY2xlcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0IsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM5RyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBa0JwQyxNQUFNOzt5QkFPNEIsRUFBRTt3QkFHVixLQUFLO3FCQUVaLEdBQUc7MkJBd0RFLEdBQUcsRUFBRTtZQUN6QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7O1lBQ2pCLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEMsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUM5QixDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2xCO1lBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7U0FDdkI7MkJBRXFCLEdBQUcsRUFBRTtZQUN6QixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2xELEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDOUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2pCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNaO1lBQ0QsSUFBSSxDQUFDLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxD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O1NBQ0g7Ozs7WUFoRkosU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxjQUFjO2dCQUN4QixRQUFRLEVBQUU7Ozs7R0FJVDt5QkFDUTs7Ozs7O0dBTVI7YUFDRjs7O3VCQUVFLFNBQVMsU0FBQyxVQUFVO29CQVdwQixLQUFLOzRCQUNMLEtBQUs7NkJBQ0wsS0FBSzttQkFDTCxLQUFLO3VCQWdCTCxZQUFZLFNBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkRlc3Ryb3ksIFZpZXdDaGlsZH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1BhcnRpY2xlfSBmcm9tICcuL3BhcnRpY2xlJztcbmltcG9ydCB7UGFydGljbGVBcmdzfSBmcm9tICcuL2NvbW1vbic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1wYXJ0aWNsZScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBpZD1cInN0YWdlXCI+XG4gICAgICA8Y2FudmFzICNzdGFnZVJlZj48L2NhbnZhcz5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVzOiBbYFxuICAgICNzdGFnZSB7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIHdpbGwtY2hhbmdlOiBhbGw7XG4gICAgfVxuICBgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hQYXJ0aWNsZXNDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKCdzdGFnZVJlZicpIHN0YWdlUmVmOiBFbGVtZW50UmVmO1xuXG4gIHByaXZhdGUgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgcHJpdmF0ZSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgcHJpdmF0ZSB3aWR0aDogbnVtYmVyO1xuICBwcml2YXRlIGhlaWdodDogbnVtYmVyO1xuICBwcml2YXRlIHBhcnRpY2xlczogUGFydGljbGVbXSA9IFtdO1xuICBwcml2YXRlIG1haW5BbmltYXRpb25GcmFtZTogYW55O1xuICBwcml2YXRlIGNoYW5nZUFuaW1hdGlvbkZyYW1lOiBhbnk7XG4gIHByaXZhdGUgcmVzaXppbmc6IGFueSA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIHRvdGFsID0gMTAwO1xuICBASW5wdXQoKSBkZWZhdWx0X3dpZHRoOiBudW1iZXI7XG4gIEBJbnB1dCgpIGRlZmF1bHRfaGVpZ2h0OiBudW1iZXI7XG4gIEBJbnB1dCgpIGFyZ3M/OiBQYXJ0aWNsZUFyZ3M7XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuY2FudmFzID0gdGhpcy5zdGFnZVJlZi5uYXRpdmVFbGVtZW50O1xuICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnLCB7YWxwaGE6IGZhbHNlfSk7XG4gICAgdGhpcy5pbml0U3RhZ2UoKTtcbiAgICB0aGlzLmluaXRQYXJ0aWNsZSgpO1xuICAgIHRoaXMuZHJhd0NvbnRleHQoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMubWFpbkFuaW1hdGlvbkZyYW1lKTtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5jaGFuZ2VBbmltYXRpb25GcmFtZSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJylcbiAgb25SZXNpemUoKSB7XG4gICAgaWYgKCF0aGlzLnJlc2l6aW5nICYmICghdGhpcy5kZWZhdWx0X2hlaWdodCB8fCAhdGhpcy5kZWZhdWx0X3dpZHRoKSkge1xuICAgICAgdGhpcy5yZXNpemluZyA9IHRydWU7XG4gICAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuc3RhZ2VDaGFuZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLnN0YWdlQ2hhbmdlLCA2Nik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpbml0U3RhZ2UoKSB7XG4gICAgY29uc3Qge2NsaWVudFdpZHRoLCBjbGllbnRIZWlnaHR9ID0gdGhpcy5jYW52YXMucGFyZW50RWxlbWVudDtcbiAgICBpZiAodGhpcy5kZWZhdWx0X3dpZHRoKSB7XG4gICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMud2lkdGggPSB0aGlzLmRlZmF1bHRfd2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy53aWR0aCA9IGNsaWVudFdpZHRoO1xuICAgIH1cbiAgICBpZiAodGhpcy5kZWZhdWx0X2hlaWdodCkge1xuICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgPSB0aGlzLmRlZmF1bHRfaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLmhlaWdodCA9IGNsaWVudEhlaWdodDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGluaXRQYXJ0aWNsZSgpIHtcbiAgICBjb25zdCByYW5nZSA9IFt0aGlzLndpZHRoLCB0aGlzLmhlaWdodF07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRvdGFsOyBpKyspIHtcbiAgICAgIHRoaXMucGFydGljbGVzW2ldID0gbmV3IFBhcnRpY2xlKFxuICAgICAgICByYW5nZSxcbiAgICAgICAgKHRoaXMuYXJncyAmJiB0aGlzLmFyZ3Muc3BlZWQpID8gdGhpcy5hcmdzLnNwZWVkIDogJ25vcm1hbCcsXG4gICAgICAgICh0aGlzLmFyZ3MgJiYgdGhpcy5hcmdzLnNpemUpID8gdGhpcy5hcmdzLnNpemUgOiAxLjVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGFnZUNoYW5nZSA9ICgpID0+IHtcbiAgICB0aGlzLmluaXRTdGFnZSgpO1xuICAgIGNvbnN0IHJhbmdlID0gW3RoaXMud2lkdGgsIHRoaXMuaGVpZ2h0XTtcbiAgICBmb3IgKGNvbnN0IHggb2YgdGhpcy5wYXJ0aWNsZXMpIHtcbiAgICAgIHgub25SYW5nZShyYW5nZSk7XG4gICAgfVxuICAgIHRoaXMucmVzaXppbmcgPSBmYWxzZTtcbiAgfTtcblxuICBwcml2YXRlIGRyYXdDb250ZXh0ID0gKCkgPT4ge1xuICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgZm9yIChjb25zdCB4IG9mIHRoaXMucGFydGljbGVzKSB7XG4gICAgICB4LmRyYXcodGhpcy5jdHgpO1xuICAgICAgeC51cGRhdGUoKTtcbiAgICB9XG4gICAgdGhpcy5tYWluQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuZHJhd0NvbnRleHQpO1xuICAgIHRoaXMucmVzaXppbmcgPSBmYWxzZTtcbiAgfTtcbn1cbiJdfQ==