import { Component, HostListener, Input, ViewChild, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} origin
 * @return {?}
 */
function saveDecimal(origin) {
    return Math.floor(origin * 100) / 100;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class Particle {
    /**
     * @param {?} range
     * @param {?=} speed
     * @param {?=} size
     */
    constructor(range, speed = 'normal', size = 1.5) {
        this.max_width = range[0];
        this.max_height = range[1];
        this.initPosition();
        this.initSpeed(speed);
        this.initSize(size);
        this.initColor();
    }
    /**
     * @param {?} range
     * @return {?}
     */
    onRange(range) {
        this.max_width = range[0];
        this.max_height = range[1];
    }
    /**
     * @return {?}
     */
    initPosition() {
        this.x = saveDecimal(Math.random() * this.max_width);
        this.y = saveDecimal(Math.random() * this.max_height);
    }
    /**
     * @param {?} speed
     * @return {?}
     */
    initSpeed(speed) {
        /** @type {?} */
        let vi = [];
        if (typeof speed === 'string') {
            switch (speed) {
                case 'fast':
                    vi = [1, 1];
                    break;
                case 'normal':
                    vi = [2, 2];
                    break;
                case 'slow':
                    vi = [5, 5];
                    break;
                default:
                    vi = [2, 2];
            }
        }
        else {
            vi = speed;
        }
        this.vx = saveDecimal(Math.random() / vi[0]);
        this.vy = saveDecimal(Math.random() / vi[1]);
    }
    /**
     * @param {?} size
     * @return {?}
     */
    initSize(size) {
        this.size = (1 + Math.random()) * size;
    }
    /**
     * @return {?}
     */
    initColor() {
        this.color = `rgb(${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)})`;
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    draw(ctx) {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);
        ctx.fillStyle = this.color;
        ctx.strokeStyle = this.color;
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
    }
    /**
     * @return {?}
     */
    update() {
        this.edge();
        this.x = this.x + this.vx;
        this.y = this.y + this.vy;
    }
    /**
     * @return {?}
     */
    edge() {
        if (this.x + this.vx > this.max_width || this.x + this.vx < 0) {
            this.vx = -this.vx;
        }
        if (this.y + this.vy > this.max_height || this.y + this.vy < 0) {
            this.vy = -this.vy;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxParticlesComponent {
    constructor() {
        this.particles = [];
        this.resizing = false;
        this.total = 100;
        this.stageChange = () => {
            this.initStage();
            /** @type {?} */
            const range = [this.width, this.height];
            for (const x of this.particles) {
                x.onRange(range);
            }
            this.resizing = false;
        };
        this.drawContext = () => {
            this.ctx.clearRect(0, 0, this.width, this.height);
            for (const x of this.particles) {
                x.draw(this.ctx);
                x.update();
            }
            this.mainAnimationFrame = window.requestAnimationFrame(this.drawContext);
            this.resizing = false;
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.canvas = this.stageRef.nativeElement;
        this.ctx = this.canvas.getContext('2d', { alpha: false });
        this.initStage();
        this.initParticle();
        this.drawContext();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.ctx.clearRect(0, 0, this.width, this.height);
        window.cancelAnimationFrame(this.mainAnimationFrame);
        window.cancelAnimationFrame(this.changeAnimationFrame);
    }
    /**
     * @return {?}
     */
    onResize() {
        if (!this.resizing && (!this.default_height || !this.default_width)) {
            this.resizing = true;
            if (window.requestAnimationFrame) {
                window.requestAnimationFrame(this.stageChange);
            }
            else {
                setTimeout(this.stageChange, 66);
            }
        }
    }
    /**
     * @return {?}
     */
    initStage() {
        const { clientWidth, clientHeight } = this.canvas.parentElement;
        if (this.default_width) {
            this.canvas.width = this.width = this.default_width;
        }
        else {
            this.canvas.width = this.width = clientWidth;
        }
        if (this.default_height) {
            this.canvas.height = this.height = this.default_height;
        }
        else {
            this.canvas.height = this.height = clientHeight;
        }
    }
    /**
     * @return {?}
     */
    initParticle() {
        /** @type {?} */
        const range = [this.width, this.height];
        for (let i = 0; i < this.total; i++) {
            this.particles[i] = new Particle(range, (this.args && this.args.speed) ? this.args.speed : 'normal', (this.args && this.args.size) ? this.args.size : 1.5);
        }
    }
}
NgxParticlesComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-particle',
                template: `
    <div id="stage">
      <canvas #stageRef></canvas>
    </div>
  `,
                styles: [`
    #stage {
      height: 100%;
      width: 100%;
      will-change: all;
    }
  `]
            }] }
];
NgxParticlesComponent.propDecorators = {
    stageRef: [{ type: ViewChild, args: ['stageRef',] }],
    total: [{ type: Input }],
    default_width: [{ type: Input }],
    default_height: [{ type: Input }],
    args: [{ type: Input }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxParticlesModule {
}
NgxParticlesModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [NgxParticlesComponent],
                exports: [NgxParticlesComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxParticlesModule, NgxParticlesComponent as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,