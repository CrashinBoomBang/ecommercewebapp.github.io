/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
var /**
 * @abstract
 * @template T
 */
AbstractControlValueAccessor = /** @class */ (function () {
    function AbstractControlValueAccessor() {
        /**
         * Invoked when the model has been changed
         */
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        /**
         * Invoked when the model has been touched
         */
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /**
     * Method that is invoked on an update of a model.
     */
    /**
     * Method that is invoked on an update of a model.
     * @return {?}
     */
    AbstractControlValueAccessor.prototype.updateChanges = /**
     * Method that is invoked on an update of a model.
     * @return {?}
     */
    function () {
        this.onChange(this.value);
    };
    /**
     * Writes a new item to the element.
     * @param value the value
     */
    /**
     * Writes a new item to the element.
     * @param {?} value the value
     * @return {?}
     */
    AbstractControlValueAccessor.prototype.writeValue = /**
     * Writes a new item to the element.
     * @param {?} value the value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this.updateChanges();
    };
    /**
     * Registers a callback function that should be called when the control's value changes in the UI.
     * @param fn
     */
    /**
     * Registers a callback function that should be called when the control's value changes in the UI.
     * @param {?} fn
     * @return {?}
     */
    AbstractControlValueAccessor.prototype.registerOnChange = /**
     * Registers a callback function that should be called when the control's value changes in the UI.
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * Registers a callback function that should be called when the control receives a blur event.
     * @param fn
     */
    /**
     * Registers a callback function that should be called when the control receives a blur event.
     * @param {?} fn
     * @return {?}
     */
    AbstractControlValueAccessor.prototype.registerOnTouched = /**
     * Registers a callback function that should be called when the control receives a blur event.
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    return AbstractControlValueAccessor;
}());
/**
 * @abstract
 * @template T
 */
export { AbstractControlValueAccessor };
if (false) {
    /** @type {?} */
    AbstractControlValueAccessor.prototype.value;
    /**
     * Invoked when the model has been changed
     * @type {?}
     */
    AbstractControlValueAccessor.prototype.onChange;
    /**
     * Invoked when the model has been touched
     * @type {?}
     */
    AbstractControlValueAccessor.prototype.onTouched;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtdmFsdWUtYWNjZXNzb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1tYXQtc2VhcmNoLWJhci8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbmctbWF0LXNlYXJjaC1iYXIvdXRpbC9hYnN0cmFjdC12YWx1ZS1hY2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUVBOzs7OztJQUFBOzs7O1FBT0UsYUFBUTs7OztRQUFxQixVQUFDLENBQU0sSUFBTSxDQUFDLEVBQUM7Ozs7UUFJNUMsY0FBUzs7O1FBQWUsY0FBTyxDQUFDLEVBQUM7SUFnQ25DLENBQUM7SUEvQkM7O09BRUc7Ozs7O0lBQ0gsb0RBQWE7Ozs7SUFBYjtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7O09BR0c7Ozs7OztJQUNILGlEQUFVOzs7OztJQUFWLFVBQVcsS0FBYTtRQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ0gsdURBQWdCOzs7OztJQUFoQixVQUFpQixFQUFPO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7O09BR0c7Ozs7OztJQUNILHdEQUFpQjs7Ozs7SUFBakIsVUFBa0IsRUFBTztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBQ0gsbUNBQUM7QUFBRCxDQUFDLEFBM0NELElBMkNDOzs7Ozs7OztJQXpDQyw2Q0FBYzs7Ozs7SUFLZCxnREFBNEM7Ozs7O0lBSTVDLGlEQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RDb250cm9sVmFsdWVBY2Nlc3NvcjxUPlxuICBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgdmFsdWU6IHN0cmluZztcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBtb2RlbCBoYXMgYmVlbiBjaGFuZ2VkXG4gICAqL1xuICBvbkNoYW5nZTogKF86IGFueSkgPT4gdm9pZCA9IChfOiBhbnkpID0+IHt9O1xuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBtb2RlbCBoYXMgYmVlbiB0b3VjaGVkXG4gICAqL1xuICBvblRvdWNoZWQ6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgLyoqXG4gICAqIE1ldGhvZCB0aGF0IGlzIGludm9rZWQgb24gYW4gdXBkYXRlIG9mIGEgbW9kZWwuXG4gICAqL1xuICB1cGRhdGVDaGFuZ2VzKCkge1xuICAgIHRoaXMub25DaGFuZ2UodGhpcy52YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogV3JpdGVzIGEgbmV3IGl0ZW0gdG8gdGhlIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWVcbiAgICovXG4gIHdyaXRlVmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnVwZGF0ZUNoYW5nZXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGUgY29udHJvbCdzIHZhbHVlIGNoYW5nZXMgaW4gdGhlIFVJLlxuICAgKiBAcGFyYW0gZm5cbiAgICovXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGUgY29udHJvbCByZWNlaXZlcyBhIGJsdXIgZXZlbnQuXG4gICAqIEBwYXJhbSBmblxuICAgKi9cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cbn1cbiJdfQ==