/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, ElementRef, EventEmitter, forwardRef, Output, ViewChild, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';
import { AbstractControlValueAccessor } from '../util/abstract-value-accessor';
var MatSearchBarComponent = /** @class */ (function (_super) {
    tslib_1.__extends(MatSearchBarComponent, _super);
    function MatSearchBarComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onBlur = new EventEmitter();
        _this.onClose = new EventEmitter();
        _this.onEnter = new EventEmitter();
        _this.onFocus = new EventEmitter();
        _this.onOpen = new EventEmitter();
        _this.searchVisible = false;
        return _this;
    }
    /**
     * @return {?}
     */
    MatSearchBarComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.searchVisible = false;
        this.value = '';
        this.updateChanges();
        this.onClose.emit();
    };
    /**
     * @return {?}
     */
    MatSearchBarComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        this.searchVisible = true;
        this.inputElement.nativeElement.focus();
        this.onOpen.emit();
    };
    /**
     * @param {?} searchValue
     * @return {?}
     */
    MatSearchBarComponent.prototype.onBlurring = /**
     * @param {?} searchValue
     * @return {?}
     */
    function (searchValue) {
        if (!searchValue) {
            this.searchVisible = false;
        }
        this.onBlur.emit(searchValue);
    };
    /**
     * @param {?} searchValue
     * @return {?}
     */
    MatSearchBarComponent.prototype.onEnterring = /**
     * @param {?} searchValue
     * @return {?}
     */
    function (searchValue) {
        this.onEnter.emit(searchValue);
    };
    /**
     * @param {?} searchValue
     * @return {?}
     */
    MatSearchBarComponent.prototype.onFocussing = /**
     * @param {?} searchValue
     * @return {?}
     */
    function (searchValue) {
        this.onFocus.emit(searchValue);
    };
    MatSearchBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-search-bar',
                    template: "<mat-form-field *ngIf=\"!formControl\" class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" placeholder=\"\" [(ngModel)]=\"value\" (ngModelChange)=\"updateChanges()\"\n    (blur)=\"onBlurring(input.value)\" (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n<!-- FORM CONTROL WAY -->\n<mat-form-field class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" placeholder=\"\" [formControl]=\"formControl\" (blur)=\"onBlurring(input.value)\"\n    (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>close</mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>search</mat-icon>\n</span>",
                    animations: [
                        trigger('slideInOut', [
                            state('true', style({ width: '*' })),
                            state('false', style({ width: '0' })),
                            transition('true => false', animate('300ms ease-in')),
                            transition('false => true', animate('300ms ease-out'))
                        ])
                    ],
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return MatSearchBarComponent; })),
                            multi: true
                        }
                    ],
                    styles: [":host{position:relative;display:flex;flex-direction:row;align-items:center;justify-content:flex-end;width:24px;height:24px}.mat-search_field{position:absolute;z-index:1;padding:0 24px 0 0}.mat-search_icons{display:block;margin:0;padding:0;position:absolute;top:0;left:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{transition:.2s cubic-bezier(.4,0,.2,1);position:absolute;top:0;left:0;z-index:2;border-radius:50%}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;-webkit-transform:rotate(225deg);transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;z-index:3;visibility:visible;-webkit-transform:rotate(360deg);transform:rotate(360deg)}"]
                }] }
    ];
    MatSearchBarComponent.propDecorators = {
        inputElement: [{ type: ViewChild, args: ['input',] }],
        formControl: [{ type: Input }],
        onBlur: [{ type: Output }],
        onClose: [{ type: Output }],
        onEnter: [{ type: Output }],
        onFocus: [{ type: Output }],
        onOpen: [{ type: Output }]
    };
    return MatSearchBarComponent;
}(AbstractControlValueAccessor));
export { MatSearchBarComponent };
if (false) {
    /** @type {?} */
    MatSearchBarComponent.prototype.inputElement;
    /** @type {?} */
    MatSearchBarComponent.prototype.formControl;
    /** @type {?} */
    MatSearchBarComponent.prototype.onBlur;
    /** @type {?} */
    MatSearchBarComponent.prototype.onClose;
    /** @type {?} */
    MatSearchBarComponent.prototype.onEnter;
    /** @type {?} */
    MatSearchBarComponent.prototype.onFocus;
    /** @type {?} */
    MatSearchBarComponent.prototype.onOpen;
    /** @type {?} */
    MatSearchBarComponent.prototype.searchVisible;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlYXJjaC1iYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbWF0LXNlYXJjaC1iYXIvIiwic291cmNlcyI6WyJzcmMvYXBwL25nLW1hdC1zZWFyY2gtYmFyL21hdC1zZWFyY2gtYmFyL21hdC1zZWFyY2gtYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxPQUFPLEVBQ1AsS0FBSyxFQUNMLEtBQUssRUFDTCxVQUFVLEVBQ1YsT0FBTyxFQUNSLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFVBQVUsRUFDVixNQUFNLEVBQ04sU0FBUyxFQUNULEtBQUssRUFFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQWEsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0UsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFL0U7SUFvQjJDLGlEQUUxQztJQXRCRDtRQUFBLHFFQThEQztRQW5DVyxZQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUNwQyxhQUFPLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUNuQyxhQUFPLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUNyQyxhQUFPLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUNyQyxZQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUU1QyxtQkFBYSxHQUFHLEtBQUssQ0FBQzs7SUE2QnhCLENBQUM7Ozs7SUEzQlEscUNBQUs7OztJQUFaO1FBQ0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7OztJQUVNLG9DQUFJOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCwwQ0FBVTs7OztJQUFWLFVBQVcsV0FBbUI7UUFDNUIsSUFBRyxDQUFDLFdBQVcsRUFBRTtZQUNmLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1NBQzVCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFRCwyQ0FBVzs7OztJQUFYLFVBQVksV0FBbUI7UUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFFRCwyQ0FBVzs7OztJQUFYLFVBQVksV0FBbUI7UUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Z0JBN0RGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQiwwOUJBQThDO29CQUU5QyxVQUFVLEVBQUU7d0JBQ1YsT0FBTyxDQUFDLFlBQVksRUFBRTs0QkFDcEIsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQzs0QkFDcEMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQzs0QkFDckMsVUFBVSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7NEJBQ3JELFVBQVUsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7eUJBQ3ZELENBQUM7cUJBQ0g7b0JBQ0QsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVOzs7NEJBQUMsY0FBTSxPQUFBLHFCQUFxQixFQUFyQixDQUFxQixFQUFDOzRCQUNwRCxLQUFLLEVBQUUsSUFBSTt5QkFDWjtxQkFDRjs7aUJBQ0Y7OzsrQkFJRSxTQUFTLFNBQUMsT0FBTzs4QkFFakIsS0FBSzt5QkFFTCxNQUFNOzBCQUNOLE1BQU07MEJBQ04sTUFBTTswQkFDTixNQUFNO3lCQUNOLE1BQU07O0lBK0JULDRCQUFDO0NBQUEsQUE5REQsQ0FvQjJDLDRCQUE0QixHQTBDdEU7U0ExQ1kscUJBQXFCOzs7SUFHaEMsNkNBQTZDOztJQUU3Qyw0Q0FBa0M7O0lBRWxDLHVDQUE4Qzs7SUFDOUMsd0NBQTZDOztJQUM3Qyx3Q0FBK0M7O0lBQy9DLHdDQUErQzs7SUFDL0MsdUNBQTRDOztJQUU1Qyw4Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhbmltYXRlLFxuICBzdGF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXJcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgZm9yd2FyZFJlZixcbiAgT3V0cHV0LFxuICBWaWV3Q2hpbGQsXG4gIElucHV0LFxuICBPbkluaXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgRm9ybUdyb3VwLCBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJy4uL3V0aWwvYWJzdHJhY3QtdmFsdWUtYWNjZXNzb3InO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtYXQtc2VhcmNoLWJhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9tYXQtc2VhcmNoLWJhci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL21hdC1zZWFyY2gtYmFyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGFuaW1hdGlvbnM6IFtcbiAgICB0cmlnZ2VyKCdzbGlkZUluT3V0JywgW1xuICAgICAgc3RhdGUoJ3RydWUnLCBzdHlsZSh7IHdpZHRoOiAnKicgfSkpLFxuICAgICAgc3RhdGUoJ2ZhbHNlJywgc3R5bGUoeyB3aWR0aDogJzAnIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJ3RydWUgPT4gZmFsc2UnLCBhbmltYXRlKCczMDBtcyBlYXNlLWluJykpLFxuICAgICAgdHJhbnNpdGlvbignZmFsc2UgPT4gdHJ1ZScsIGFuaW1hdGUoJzMwMG1zIGVhc2Utb3V0JykpXG4gICAgXSlcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNYXRTZWFyY2hCYXJDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTWF0U2VhcmNoQmFyQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RDb250cm9sVmFsdWVBY2Nlc3NvcjxcbnN0cmluZ1xuPiB7XG4gIEBWaWV3Q2hpbGQoJ2lucHV0JykgaW5wdXRFbGVtZW50OiBFbGVtZW50UmVmO1xuXG4gIEBJbnB1dCgpIGZvcm1Db250cm9sOiBGb3JtQ29udHJvbDtcblxuICBAT3V0cHV0KCkgb25CbHVyID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIEBPdXRwdXQoKSBvbkNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgb25FbnRlciA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBAT3V0cHV0KCkgb25Gb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBAT3V0cHV0KCkgb25PcGVuID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIHNlYXJjaFZpc2libGUgPSBmYWxzZTtcblxuICBwdWJsaWMgY2xvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5zZWFyY2hWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgIHRoaXMudXBkYXRlQ2hhbmdlcygpO1xuICAgIHRoaXMub25DbG9zZS5lbWl0KCk7XG4gIH1cblxuICBwdWJsaWMgb3BlbigpOiB2b2lkIHtcbiAgICB0aGlzLnNlYXJjaFZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICB0aGlzLm9uT3Blbi5lbWl0KCk7XG4gIH1cblxuICBvbkJsdXJyaW5nKHNlYXJjaFZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZighc2VhcmNoVmFsdWUpIHtcbiAgICAgIHRoaXMuc2VhcmNoVmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLm9uQmx1ci5lbWl0KHNlYXJjaFZhbHVlKTtcbiAgfVxuXG4gIG9uRW50ZXJyaW5nKHNlYXJjaFZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLm9uRW50ZXIuZW1pdChzZWFyY2hWYWx1ZSk7XG4gIH1cblxuICBvbkZvY3Vzc2luZyhzZWFyY2hWYWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5vbkZvY3VzLmVtaXQoc2VhcmNoVmFsdWUpO1xuICB9XG59XG4iXX0=