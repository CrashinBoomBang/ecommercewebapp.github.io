import { CommonModule } from '@angular/common';
import { MatIconModule, MatInputModule, MatRippleModule } from '@angular/material';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, EventEmitter, forwardRef, Output, ViewChild, Input, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
class AbstractControlValueAccessor {
    constructor() {
        /**
         * Invoked when the model has been changed
         */
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        /**
         * Invoked when the model has been touched
         */
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * Method that is invoked on an update of a model.
     * @return {?}
     */
    updateChanges() {
        this.onChange(this.value);
    }
    /**
     * Writes a new item to the element.
     * @param {?} value the value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        this.updateChanges();
    }
    /**
     * Registers a callback function that should be called when the control's value changes in the UI.
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Registers a callback function that should be called when the control receives a blur event.
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatSearchBarComponent extends AbstractControlValueAccessor {
    constructor() {
        super(...arguments);
        this.onBlur = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onEnter = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onOpen = new EventEmitter();
        this.searchVisible = false;
    }
    /**
     * @return {?}
     */
    close() {
        this.searchVisible = false;
        this.value = '';
        this.updateChanges();
        this.onClose.emit();
    }
    /**
     * @return {?}
     */
    open() {
        this.searchVisible = true;
        this.inputElement.nativeElement.focus();
        this.onOpen.emit();
    }
    /**
     * @param {?} searchValue
     * @return {?}
     */
    onBlurring(searchValue) {
        if (!searchValue) {
            this.searchVisible = false;
        }
        this.onBlur.emit(searchValue);
    }
    /**
     * @param {?} searchValue
     * @return {?}
     */
    onEnterring(searchValue) {
        this.onEnter.emit(searchValue);
    }
    /**
     * @param {?} searchValue
     * @return {?}
     */
    onFocussing(searchValue) {
        this.onFocus.emit(searchValue);
    }
}
MatSearchBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-search-bar',
                template: "<mat-form-field *ngIf=\"!formControl\" class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" placeholder=\"\" [(ngModel)]=\"value\" (ngModelChange)=\"updateChanges()\"\n    (blur)=\"onBlurring(input.value)\" (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n<!-- FORM CONTROL WAY -->\n<mat-form-field class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" placeholder=\"\" [formControl]=\"formControl\" (blur)=\"onBlurring(input.value)\"\n    (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>close</mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>search</mat-icon>\n</span>",
                animations: [
                    trigger('slideInOut', [
                        state('true', style({ width: '*' })),
                        state('false', style({ width: '0' })),
                        transition('true => false', animate('300ms ease-in')),
                        transition('false => true', animate('300ms ease-out'))
                    ])
                ],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => MatSearchBarComponent)),
                        multi: true
                    }
                ],
                styles: [":host{position:relative;display:flex;flex-direction:row;align-items:center;justify-content:flex-end;width:24px;height:24px}.mat-search_field{position:absolute;z-index:1;padding:0 24px 0 0}.mat-search_icons{display:block;margin:0;padding:0;position:absolute;top:0;left:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{transition:.2s cubic-bezier(.4,0,.2,1);position:absolute;top:0;left:0;z-index:2;border-radius:50%}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;-webkit-transform:rotate(225deg);transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;z-index:3;visibility:visible;-webkit-transform:rotate(360deg);transform:rotate(360deg)}"]
            }] }
];
MatSearchBarComponent.propDecorators = {
    inputElement: [{ type: ViewChild, args: ['input',] }],
    formControl: [{ type: Input }],
    onBlur: [{ type: Output }],
    onClose: [{ type: Output }],
    onEnter: [{ type: Output }],
    onFocus: [{ type: Output }],
    onOpen: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgMatSearchBarModule {
}
NgMatSearchBarModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    MatIconModule,
                    MatInputModule,
                    MatRippleModule,
                    //Reactive form
                    ReactiveFormsModule
                ],
                exports: [MatSearchBarComponent],
                declarations: [MatSearchBarComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgMatSearchBarModule, MatSearchBarComponent as ɵa, AbstractControlValueAccessor as ɵb };

//# sourceMappingURL=ng-mat-search-bar.js.map