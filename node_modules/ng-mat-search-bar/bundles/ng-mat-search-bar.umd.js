(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/material'), require('@angular/animations'), require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ng-mat-search-bar', ['exports', '@angular/common', '@angular/material', '@angular/animations', '@angular/core', '@angular/forms'], factory) :
    (factory((global['ng-mat-search-bar'] = {}),global.ng.common,global.ng.material,global.ng.animations,global.ng.core,global.ng.forms));
}(this, (function (exports,common,material,animations,core,forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     * @template T
     */
    var /**
     * @abstract
     * @template T
     */ AbstractControlValueAccessor = /** @class */ (function () {
        function AbstractControlValueAccessor() {
            /**
             * Invoked when the model has been changed
             */
            this.onChange = ( /**
             * @param {?} _
             * @return {?}
             */function (_) { });
            /**
             * Invoked when the model has been touched
             */
            this.onTouched = ( /**
             * @return {?}
             */function () { });
        }
        /**
         * Method that is invoked on an update of a model.
         */
        /**
         * Method that is invoked on an update of a model.
         * @return {?}
         */
        AbstractControlValueAccessor.prototype.updateChanges = /**
         * Method that is invoked on an update of a model.
         * @return {?}
         */
            function () {
                this.onChange(this.value);
            };
        /**
         * Writes a new item to the element.
         * @param value the value
         */
        /**
         * Writes a new item to the element.
         * @param {?} value the value
         * @return {?}
         */
        AbstractControlValueAccessor.prototype.writeValue = /**
         * Writes a new item to the element.
         * @param {?} value the value
         * @return {?}
         */
            function (value) {
                this.value = value;
                this.updateChanges();
            };
        /**
         * Registers a callback function that should be called when the control's value changes in the UI.
         * @param fn
         */
        /**
         * Registers a callback function that should be called when the control's value changes in the UI.
         * @param {?} fn
         * @return {?}
         */
        AbstractControlValueAccessor.prototype.registerOnChange = /**
         * Registers a callback function that should be called when the control's value changes in the UI.
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * Registers a callback function that should be called when the control receives a blur event.
         * @param fn
         */
        /**
         * Registers a callback function that should be called when the control receives a blur event.
         * @param {?} fn
         * @return {?}
         */
        AbstractControlValueAccessor.prototype.registerOnTouched = /**
         * Registers a callback function that should be called when the control receives a blur event.
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        return AbstractControlValueAccessor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MatSearchBarComponent = /** @class */ (function (_super) {
        __extends(MatSearchBarComponent, _super);
        function MatSearchBarComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.onBlur = new core.EventEmitter();
            _this.onClose = new core.EventEmitter();
            _this.onEnter = new core.EventEmitter();
            _this.onFocus = new core.EventEmitter();
            _this.onOpen = new core.EventEmitter();
            _this.searchVisible = false;
            return _this;
        }
        /**
         * @return {?}
         */
        MatSearchBarComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.searchVisible = false;
                this.value = '';
                this.updateChanges();
                this.onClose.emit();
            };
        /**
         * @return {?}
         */
        MatSearchBarComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                this.searchVisible = true;
                this.inputElement.nativeElement.focus();
                this.onOpen.emit();
            };
        /**
         * @param {?} searchValue
         * @return {?}
         */
        MatSearchBarComponent.prototype.onBlurring = /**
         * @param {?} searchValue
         * @return {?}
         */
            function (searchValue) {
                if (!searchValue) {
                    this.searchVisible = false;
                }
                this.onBlur.emit(searchValue);
            };
        /**
         * @param {?} searchValue
         * @return {?}
         */
        MatSearchBarComponent.prototype.onEnterring = /**
         * @param {?} searchValue
         * @return {?}
         */
            function (searchValue) {
                this.onEnter.emit(searchValue);
            };
        /**
         * @param {?} searchValue
         * @return {?}
         */
        MatSearchBarComponent.prototype.onFocussing = /**
         * @param {?} searchValue
         * @return {?}
         */
            function (searchValue) {
                this.onFocus.emit(searchValue);
            };
        MatSearchBarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mat-search-bar',
                        template: "<mat-form-field *ngIf=\"!formControl\" class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" placeholder=\"\" [(ngModel)]=\"value\" (ngModelChange)=\"updateChanges()\"\n    (blur)=\"onBlurring(input.value)\" (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n<!-- FORM CONTROL WAY -->\n<mat-form-field class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" placeholder=\"\" [formControl]=\"formControl\" (blur)=\"onBlurring(input.value)\"\n    (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>close</mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>search</mat-icon>\n</span>",
                        animations: [
                            animations.trigger('slideInOut', [
                                animations.state('true', animations.style({ width: '*' })),
                                animations.state('false', animations.style({ width: '0' })),
                                animations.transition('true => false', animations.animate('300ms ease-in')),
                                animations.transition('false => true', animations.animate('300ms ease-out'))
                            ])
                        ],
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return MatSearchBarComponent; })),
                                multi: true
                            }
                        ],
                        styles: [":host{position:relative;display:flex;flex-direction:row;align-items:center;justify-content:flex-end;width:24px;height:24px}.mat-search_field{position:absolute;z-index:1;padding:0 24px 0 0}.mat-search_icons{display:block;margin:0;padding:0;position:absolute;top:0;left:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{transition:.2s cubic-bezier(.4,0,.2,1);position:absolute;top:0;left:0;z-index:2;border-radius:50%}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;-webkit-transform:rotate(225deg);transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;z-index:3;visibility:visible;-webkit-transform:rotate(360deg);transform:rotate(360deg)}"]
                    }] }
        ];
        MatSearchBarComponent.propDecorators = {
            inputElement: [{ type: core.ViewChild, args: ['input',] }],
            formControl: [{ type: core.Input }],
            onBlur: [{ type: core.Output }],
            onClose: [{ type: core.Output }],
            onEnter: [{ type: core.Output }],
            onFocus: [{ type: core.Output }],
            onOpen: [{ type: core.Output }]
        };
        return MatSearchBarComponent;
    }(AbstractControlValueAccessor));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgMatSearchBarModule = /** @class */ (function () {
        function NgMatSearchBarModule() {
        }
        NgMatSearchBarModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            material.MatIconModule,
                            material.MatInputModule,
                            material.MatRippleModule,
                            //Reactive form
                            forms.ReactiveFormsModule
                        ],
                        exports: [MatSearchBarComponent],
                        declarations: [MatSearchBarComponent]
                    },] }
        ];
        return NgMatSearchBarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgMatSearchBarModule = NgMatSearchBarModule;
    exports.ɵa = MatSearchBarComponent;
    exports.ɵb = AbstractControlValueAccessor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-mat-search-bar.umd.js.map