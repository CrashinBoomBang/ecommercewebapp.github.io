/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, ElementRef, EventEmitter, forwardRef, Output, ViewChild, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';
import { AbstractControlValueAccessor } from '../util/abstract-value-accessor';
export class MatSearchBarComponent extends AbstractControlValueAccessor {
    constructor() {
        super(...arguments);
        this.onBlur = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onEnter = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onOpen = new EventEmitter();
        this.searchVisible = false;
    }
    /**
     * @return {?}
     */
    close() {
        this.searchVisible = false;
        this.value = '';
        this.updateChanges();
        this.onClose.emit();
    }
    /**
     * @return {?}
     */
    open() {
        this.searchVisible = true;
        this.inputElement.nativeElement.focus();
        this.onOpen.emit();
    }
    /**
     * @param {?} searchValue
     * @return {?}
     */
    onBlurring(searchValue) {
        if (!searchValue) {
            this.searchVisible = false;
        }
        this.onBlur.emit(searchValue);
    }
    /**
     * @param {?} searchValue
     * @return {?}
     */
    onEnterring(searchValue) {
        this.onEnter.emit(searchValue);
    }
    /**
     * @param {?} searchValue
     * @return {?}
     */
    onFocussing(searchValue) {
        this.onFocus.emit(searchValue);
    }
}
MatSearchBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-search-bar',
                template: "<mat-form-field *ngIf=\"!formControl\" class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" placeholder=\"\" [(ngModel)]=\"value\" (ngModelChange)=\"updateChanges()\"\n    (blur)=\"onBlurring(input.value)\" (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n<!-- FORM CONTROL WAY -->\n<mat-form-field class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" placeholder=\"\" [formControl]=\"formControl\" (blur)=\"onBlurring(input.value)\"\n    (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>close</mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>search</mat-icon>\n</span>",
                animations: [
                    trigger('slideInOut', [
                        state('true', style({ width: '*' })),
                        state('false', style({ width: '0' })),
                        transition('true => false', animate('300ms ease-in')),
                        transition('false => true', animate('300ms ease-out'))
                    ])
                ],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => MatSearchBarComponent)),
                        multi: true
                    }
                ],
                styles: [":host{position:relative;display:flex;flex-direction:row;align-items:center;justify-content:flex-end;width:24px;height:24px}.mat-search_field{position:absolute;z-index:1;padding:0 24px 0 0}.mat-search_icons{display:block;margin:0;padding:0;position:absolute;top:0;left:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{transition:.2s cubic-bezier(.4,0,.2,1);position:absolute;top:0;left:0;z-index:2;border-radius:50%}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;-webkit-transform:rotate(225deg);transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;z-index:3;visibility:visible;-webkit-transform:rotate(360deg);transform:rotate(360deg)}"]
            }] }
];
MatSearchBarComponent.propDecorators = {
    inputElement: [{ type: ViewChild, args: ['input',] }],
    formControl: [{ type: Input }],
    onBlur: [{ type: Output }],
    onClose: [{ type: Output }],
    onEnter: [{ type: Output }],
    onFocus: [{ type: Output }],
    onOpen: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    MatSearchBarComponent.prototype.inputElement;
    /** @type {?} */
    MatSearchBarComponent.prototype.formControl;
    /** @type {?} */
    MatSearchBarComponent.prototype.onBlur;
    /** @type {?} */
    MatSearchBarComponent.prototype.onClose;
    /** @type {?} */
    MatSearchBarComponent.prototype.onEnter;
    /** @type {?} */
    MatSearchBarComponent.prototype.onFocus;
    /** @type {?} */
    MatSearchBarComponent.prototype.onOpen;
    /** @type {?} */
    MatSearchBarComponent.prototype.searchVisible;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlYXJjaC1iYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbWF0LXNlYXJjaC1iYXIvIiwic291cmNlcyI6WyJzcmMvYXBwL25nLW1hdC1zZWFyY2gtYmFyL21hdC1zZWFyY2gtYmFyL21hdC1zZWFyY2gtYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLE9BQU8sRUFDUCxLQUFLLEVBQ0wsS0FBSyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1IsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osVUFBVSxFQUNWLE1BQU0sRUFDTixTQUFTLEVBQ1QsS0FBSyxFQUVOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBYSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQXNCL0UsTUFBTSxPQUFPLHFCQUFzQixTQUFRLDRCQUUxQztJQXRCRDs7UUEyQlksV0FBTSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFDcEMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFDbkMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFDckMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFDckMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFFNUMsa0JBQWEsR0FBRyxLQUFLLENBQUM7SUE2QnhCLENBQUM7Ozs7SUEzQlEsS0FBSztRQUNWLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFFTSxJQUFJO1FBQ1QsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxXQUFtQjtRQUM1QixJQUFHLENBQUMsV0FBVyxFQUFFO1lBQ2YsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7U0FDNUI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxXQUFtQjtRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxXQUFtQjtRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7WUE3REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLDA5QkFBOEM7Z0JBRTlDLFVBQVUsRUFBRTtvQkFDVixPQUFPLENBQUMsWUFBWSxFQUFFO3dCQUNwQixLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO3dCQUNwQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO3dCQUNyQyxVQUFVLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQzt3QkFDckQsVUFBVSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztxQkFDdkQsQ0FBQztpQkFDSDtnQkFDRCxTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsRUFBQzt3QkFDcEQsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7O2FBQ0Y7OzsyQkFJRSxTQUFTLFNBQUMsT0FBTzswQkFFakIsS0FBSztxQkFFTCxNQUFNO3NCQUNOLE1BQU07c0JBQ04sTUFBTTtzQkFDTixNQUFNO3FCQUNOLE1BQU07Ozs7SUFSUCw2Q0FBNkM7O0lBRTdDLDRDQUFrQzs7SUFFbEMsdUNBQThDOztJQUM5Qyx3Q0FBNkM7O0lBQzdDLHdDQUErQzs7SUFDL0Msd0NBQStDOztJQUMvQyx1Q0FBNEM7O0lBRTVDLDhDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIHN0YXRlLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvbixcbiAgdHJpZ2dlclxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBmb3J3YXJkUmVmLFxuICBPdXRwdXQsXG4gIFZpZXdDaGlsZCxcbiAgSW5wdXQsXG4gIE9uSW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBGb3JtR3JvdXAsIEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnLi4vdXRpbC9hYnN0cmFjdC12YWx1ZS1hY2Nlc3Nvcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21hdC1zZWFyY2gtYmFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21hdC1zZWFyY2gtYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbWF0LXNlYXJjaC1iYXIuY29tcG9uZW50LnNjc3MnXSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ3NsaWRlSW5PdXQnLCBbXG4gICAgICBzdGF0ZSgndHJ1ZScsIHN0eWxlKHsgd2lkdGg6ICcqJyB9KSksXG4gICAgICBzdGF0ZSgnZmFsc2UnLCBzdHlsZSh7IHdpZHRoOiAnMCcgfSkpLFxuICAgICAgdHJhbnNpdGlvbigndHJ1ZSA9PiBmYWxzZScsIGFuaW1hdGUoJzMwMG1zIGVhc2UtaW4nKSksXG4gICAgICB0cmFuc2l0aW9uKCdmYWxzZSA9PiB0cnVlJywgYW5pbWF0ZSgnMzAwbXMgZWFzZS1vdXQnKSlcbiAgICBdKVxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE1hdFNlYXJjaEJhckNvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBNYXRTZWFyY2hCYXJDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdENvbnRyb2xWYWx1ZUFjY2Vzc29yPFxuc3RyaW5nXG4+IHtcbiAgQFZpZXdDaGlsZCgnaW5wdXQnKSBpbnB1dEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgQElucHV0KCkgZm9ybUNvbnRyb2w6IEZvcm1Db250cm9sO1xuXG4gIEBPdXRwdXQoKSBvbkJsdXIgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgQE91dHB1dCgpIG9uQ2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBvbkVudGVyID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIEBPdXRwdXQoKSBvbkZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIEBPdXRwdXQoKSBvbk9wZW4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgc2VhcmNoVmlzaWJsZSA9IGZhbHNlO1xuXG4gIHB1YmxpYyBjbG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNlYXJjaFZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLnZhbHVlID0gJyc7XG4gICAgdGhpcy51cGRhdGVDaGFuZ2VzKCk7XG4gICAgdGhpcy5vbkNsb3NlLmVtaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBvcGVuKCk6IHZvaWQge1xuICAgIHRoaXMuc2VhcmNoVmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIHRoaXMub25PcGVuLmVtaXQoKTtcbiAgfVxuXG4gIG9uQmx1cnJpbmcoc2VhcmNoVmFsdWU6IHN0cmluZykge1xuICAgIGlmKCFzZWFyY2hWYWx1ZSkge1xuICAgICAgdGhpcy5zZWFyY2hWaXNpYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMub25CbHVyLmVtaXQoc2VhcmNoVmFsdWUpO1xuICB9XG5cbiAgb25FbnRlcnJpbmcoc2VhcmNoVmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMub25FbnRlci5lbWl0KHNlYXJjaFZhbHVlKTtcbiAgfVxuXG4gIG9uRm9jdXNzaW5nKHNlYXJjaFZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLm9uRm9jdXMuZW1pdChzZWFyY2hWYWx1ZSk7XG4gIH1cbn1cbiJdfQ==